name: Build and Push Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get the latest tag
      id: get_latest_tag
      run: echo ::set-output name=tag::$(git describe --tags `git rev-list --tags --max-count=1`)

    - name: Get commit messages
      id: commit_messages
      run: echo ::set-output name=messages::$(git log -1 --pretty=%B)

    - name: Determine version increment
      id: version_increment
      run: |
        commit_message="${{ steps.commit_messages.outputs.messages }}"
        echo "Commit message: $commit_message"
        if [[ "$commit_message" =~ "feat!" ]]; then
          echo ::set-output name=increment::major
        elif [[ "$commit_message" =~ "feat:" ]]; then
          echo ::set-output name=increment::minor
        elif [[ "$commit_message" =~ "fix:" ]]; then
          echo ::set-output name=increment::patch
        else
          echo ::set-output name=increment::patch
        fi

    - name: Calculate new tag
      id: new_tag
      run: |
        latest_tag=${{ steps.get_latest_tag.outputs.tag }}
        increment=${{ steps.version_increment.outputs.increment }}
        echo "Latest tag: $latest_tag"
        if [ -z "$latest_tag" ]; then
          new_tag="v1.0.0"
        else
          IFS='.' read -r -a parts <<< "${latest_tag/v/}"
          major=${parts[0]}
          minor=${parts[1]}
          patch=${parts[2]}
          if [ "$increment" == "major" ]; then
            major=$((major+1))
            minor=0
            patch=0
          elif [ "$increment" == "minor" ]; then
            minor=$((minor+1))
            patch=0
          else
            patch=$((patch+1))
          fi
          new_tag="v$major.$minor.$patch"
        fi
        echo "New tag: $new_tag"
        echo ::set-output name=new_tag::$new_tag

    - name: Check if tag exists
      id: check_tag
      run: |
        tag_exists=$(git ls-remote --tags origin refs/tags/${{ steps.new_tag.outputs.new_tag }} | wc -l)
        echo "tag_exists=$tag_exists" >> $GITHUB_ENV

    - name: Create new tag
      if: env.tag_exists == '0'
      env:
        ACTIONS_PAT: ${{ secrets.ACTIONS_PAT }}
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ steps.new_tag.outputs.new_tag }}
        git push https://x-access-token:${{ secrets.ACTIONS_PAT }}@github.com/${{ github.repository }} ${{ steps.new_tag.outputs.new_tag }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image to Docker Hub
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: |
          jordyjordyjordy/unifi-timelapser:latest
          jordyjordyjordy/unifi-timelapser:${{ steps.new_tag.outputs.new_tag }}

    - name: Build and push Docker image to GitHub Container Registry
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ steps.new_tag.outputs.new_tag }}

    - name: Logout from Docker Hub
      run: docker logout

    - name: Logout from GitHub Container Registry
      run: docker logout ghcr.io