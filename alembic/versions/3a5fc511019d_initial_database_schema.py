"""Initial database schema

Revision ID: 3a5fc511019d
Revises: 
Create Date: 2025-06-04 14:41:54.235074

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '3a5fc511019d'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('cameras',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('url_hash', sa.String(length=64), nullable=False),
    sa.Column('encryption_key_ref', sa.String(length=64), nullable=True),
    sa.Column('last_health_check', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('connection_failures', sa.Integer(), nullable=False),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.Column('rotation', sa.String(length=20), nullable=False),
    sa.Column('day_counter_enabled', sa.Boolean(), nullable=False),
    sa.Column('day_counter_start_date', sa.Date(), nullable=True),
    sa.Column('camera_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('day_overlay_position', sa.String(length=20), nullable=False),
    sa.Column('day_overlay_style', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint("day_overlay_position IN ('top-left', 'top-right', 'bottom-left', 'bottom-right')", name='check_overlay_position'),
    sa.CheckConstraint("rotation IN ('none', 'left', 'right', 'invert')", name='check_rotation'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('url_hash')
    )
    op.create_index('idx_cameras_enabled', 'cameras', ['enabled'], unique=False)
    op.create_index('idx_cameras_name', 'cameras', ['name'], unique=False)
    op.create_index('idx_cameras_overlay_gin', 'cameras', ['day_overlay_style'], unique=False, postgresql_using='gin')
    op.create_table('shares',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('share_token', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('share_type', sa.String(length=20), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('download_enabled', sa.Boolean(), nullable=False),
    sa.Column('embed_enabled', sa.Boolean(), nullable=False),
    sa.Column('expires_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('share_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('search_vector', postgresql.TSVECTOR(), nullable=True),
    sa.Column('view_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint("share_type IN ('video_only', 'info_page', 'gallery')", name='check_share_type'),
    sa.CheckConstraint('view_count >= 0', name='check_view_count_non_negative'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('share_token')
    )
    op.create_index('idx_shares_active', 'shares', ['is_active', 'expires_at'], unique=False)
    op.create_index('idx_shares_metadata_gin', 'shares', ['share_metadata'], unique=False, postgresql_using='gin', postgresql_where=sa.text("share_metadata != '{}'::jsonb"))
    op.create_index('idx_shares_search', 'shares', ['search_vector'], unique=False, postgresql_using='gin')
    op.create_index('idx_shares_token', 'shares', ['share_token'], unique=False)
    op.create_table('images',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('camera_id', sa.Integer(), nullable=False),
    sa.Column('filename', sa.String(length=255), nullable=False),
    sa.Column('file_path', sa.Text(), nullable=False),
    sa.Column('file_size_bytes', sa.BigInteger(), nullable=False),
    sa.Column('width', sa.Integer(), nullable=True),
    sa.Column('height', sa.Integer(), nullable=True),
    sa.Column('format', sa.String(length=10), nullable=False),
    sa.Column('quality_score', sa.Integer(), nullable=True),
    sa.Column('file_hash', sa.String(length=64), nullable=True),
    sa.Column('captured_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('day_number', sa.Integer(), nullable=True),
    sa.Column('processing_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('file_size_bytes > 0', name='check_file_size_positive'),
    sa.CheckConstraint('quality_score BETWEEN 0 AND 100', name='check_quality_score'),
    sa.ForeignKeyConstraint(['camera_id'], ['cameras.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_images_camera_captured_desc', 'images', ['camera_id', 'captured_at'], unique=False, postgresql_using='btree')
    op.create_index('idx_images_camera_day', 'images', ['camera_id', 'day_number'], unique=False)
    op.create_index('idx_images_captured_at', 'images', ['captured_at'], unique=False)
    op.create_index('idx_images_captured_at_brin', 'images', ['captured_at'], unique=False, postgresql_using='brin')
    op.create_index('idx_images_metadata_gin', 'images', ['processing_metadata'], unique=False, postgresql_using='gin')
    op.create_table('share_customization',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('share_id', sa.Integer(), nullable=False),
    sa.Column('theme_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('display_options', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['share_id'], ['shares.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('timelapse_batches',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('camera_id', sa.Integer(), nullable=False),
    sa.Column('batch_type', sa.String(length=20), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('output_filename', sa.String(length=255), nullable=True),
    sa.Column('output_path', sa.Text(), nullable=True),
    sa.Column('file_size_bytes', sa.Integer(), nullable=True),
    sa.Column('frame_rate', sa.Integer(), nullable=False),
    sa.Column('total_frames', sa.Integer(), nullable=False),
    sa.Column('duration_seconds', sa.Float(), nullable=True),
    sa.Column('generation_mode', sa.String(length=20), nullable=False),
    sa.Column('day_overlay_applied', sa.Boolean(), nullable=False),
    sa.Column('day_range_start', sa.Integer(), nullable=True),
    sa.Column('day_range_end', sa.Integer(), nullable=True),
    sa.Column('started_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('completed_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint("batch_type IN ('continuous', 'checkpoint', 'manual')", name='check_batch_type'),
    sa.CheckConstraint("generation_mode IN ('every_capture', 'periodic', 'manual_only')", name='check_generation_mode'),
    sa.CheckConstraint("status IN ('pending', 'processing', 'completed', 'failed')", name='check_status'),
    sa.CheckConstraint('frame_rate > 0', name='check_frame_rate_positive'),
    sa.CheckConstraint('total_frames >= 0', name='check_total_frames_non_negative'),
    sa.ForeignKeyConstraint(['camera_id'], ['cameras.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_batches_camera_status', 'timelapse_batches', ['camera_id', 'status'], unique=False)
    op.create_index('idx_batches_pending', 'timelapse_batches', ['status', 'created_at'], unique=False, postgresql_where=sa.text("status = 'pending'"))
    op.create_index('idx_batches_type_status', 'timelapse_batches', ['batch_type', 'status'], unique=False)
    op.create_table('capture_attempts',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('camera_id', sa.Integer(), nullable=False),
    sa.Column('attempted_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('image_id', sa.BigInteger(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('duration_ms', sa.Integer(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.CheckConstraint("status IN ('success', 'failed', 'timeout', 'error')", name='check_capture_status'),
    sa.CheckConstraint('retry_count >= 0', name='check_retry_count_non_negative'),
    sa.ForeignKeyConstraint(['camera_id'], ['cameras.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['image_id'], ['images.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_capture_attempts_camera_time', 'capture_attempts', ['camera_id', 'attempted_at'], unique=False)
    op.create_index('idx_capture_attempts_status', 'capture_attempts', ['status'], unique=False)
    op.create_table('share_batches',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('share_id', sa.Integer(), nullable=False),
    sa.Column('timelapse_batch_id', sa.Integer(), nullable=False),
    sa.Column('display_order', sa.Integer(), nullable=False),
    sa.Column('custom_title', sa.String(length=255), nullable=True),
    sa.Column('show_metadata', sa.Boolean(), nullable=False),
    sa.Column('added_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['share_id'], ['shares.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['timelapse_batch_id'], ['timelapse_batches.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('share_id', 'timelapse_batch_id', name='uq_share_batch')
    )
    op.create_index('idx_share_batches_batch', 'share_batches', ['timelapse_batch_id'], unique=False)
    op.create_index('idx_share_batches_share', 'share_batches', ['share_id', 'display_order'], unique=False)
    op.create_table('timelapse_images',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('timelapse_batch_id', sa.Integer(), nullable=False),
    sa.Column('image_id', sa.BigInteger(), nullable=False),
    sa.Column('sequence_order', sa.Integer(), nullable=False),
    sa.Column('included_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['image_id'], ['images.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['timelapse_batch_id'], ['timelapse_batches.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('timelapse_batch_id', 'image_id', name='uq_batch_image'),
    sa.UniqueConstraint('timelapse_batch_id', 'sequence_order', name='uq_batch_sequence')
    )
    op.create_index('idx_timelapse_images_batch', 'timelapse_images', ['timelapse_batch_id'], unique=False)
    op.create_index('idx_timelapse_images_image', 'timelapse_images', ['image_id'], unique=False)
    op.create_index('idx_timelapse_images_sequence', 'timelapse_images', ['timelapse_batch_id', 'sequence_order'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_timelapse_images_sequence', table_name='timelapse_images')
    op.drop_index('idx_timelapse_images_image', table_name='timelapse_images')
    op.drop_index('idx_timelapse_images_batch', table_name='timelapse_images')
    op.drop_table('timelapse_images')
    op.drop_index('idx_share_batches_share', table_name='share_batches')
    op.drop_index('idx_share_batches_batch', table_name='share_batches')
    op.drop_table('share_batches')
    op.drop_index('idx_capture_attempts_status', table_name='capture_attempts')
    op.drop_index('idx_capture_attempts_camera_time', table_name='capture_attempts')
    op.drop_table('capture_attempts')
    op.drop_index('idx_batches_type_status', table_name='timelapse_batches')
    op.drop_index('idx_batches_pending', table_name='timelapse_batches', postgresql_where=sa.text("status = 'pending'"))
    op.drop_index('idx_batches_camera_status', table_name='timelapse_batches')
    op.drop_table('timelapse_batches')
    op.drop_table('share_customization')
    op.drop_index('idx_images_metadata_gin', table_name='images', postgresql_using='gin')
    op.drop_index('idx_images_captured_at_brin', table_name='images', postgresql_using='brin')
    op.drop_index('idx_images_captured_at', table_name='images')
    op.drop_index('idx_images_camera_day', table_name='images')
    op.drop_index('idx_images_camera_captured_desc', table_name='images', postgresql_using='btree')
    op.drop_table('images')
    op.drop_index('idx_shares_token', table_name='shares')
    op.drop_index('idx_shares_search', table_name='shares', postgresql_using='gin')
    op.drop_index('idx_shares_metadata_gin', table_name='shares', postgresql_using='gin', postgresql_where=sa.text("share_metadata != '{}'::jsonb"))
    op.drop_index('idx_shares_active', table_name='shares')
    op.drop_table('shares')
    op.drop_index('idx_cameras_overlay_gin', table_name='cameras', postgresql_using='gin')
    op.drop_index('idx_cameras_name', table_name='cameras')
    op.drop_index('idx_cameras_enabled', table_name='cameras')
    op.drop_table('cameras')
    # ### end Alembic commands ###
